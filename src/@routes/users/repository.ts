import mongoose, { Model } from "mongoose";
import { Users, UserDetails } from "../../@types";

export default class UserRepository {
  /**
   * UserRepository constructor
   * @param userModel Mongoose model for the User schema
   */
  constructor(private userModel: Model<Users>) {}

  /**
   * Get all users from the database
   * @returns All users in the database
   * including their details
   */
  async getAll() {
    // v1
    // return await this.userModel
    //   .find()
    //   .populate<{ userDetails: UserDetails }>("user_details")
    //   .exec();

    return await this.userModel.find();
  }

  /**
   * Get a user by ID from the database
   * @param id User ID
   * @returns The user with the specified ID, or null if not found
   * including their details
   */
  async getById(id: string) {
    return this.userModel
      .findById(id)
      .populate<{ userDetails: UserDetails }>("user_details")
      .exec();
  }

  /**
   * Retrieved specific user record by userame
   * @param username - user's registered username.
   * @returns The user with the specified username, or null if not found
   * including their details
   */
  async getByUsername(username: string) {
    return await this.userModel.findOne({ username });
  }

  /**
   * Create a new user in the database
   * @param data User data
   * @returns The created user
   * Were omitting createdAt and updatedAt because they will be auto generated by mongoose
   */
  async create(
    data: Omit<Users, "createdAt" | "updatedAt">,
    options?: { session?: mongoose.ClientSession }
  ) {
    return this.userModel.create([data], options);
  }

  /**
   * Update a user by ID in the database
   * @param id User ID
   * @param data User data to update
   * @returns The updated user
   */
  async updateById(id: string, data: Partial<Users>) {
    return this.userModel.findByIdAndUpdate(
      id,
      {
        ...data,
        updatedAt: new Date(), // Update the updatedAt field to the current date
      },
      { new: true }
    );
  }

  /**
   * Delete a user by ID from the database
   * @param id User ID
   * @returns The deleted user, or null if not found
   */
  async deleteById(id: string) {
    return this.userModel.findByIdAndDelete(id);
  }
}
